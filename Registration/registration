from flask import Flask, render_template, request, redirect, url_for, flash
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import os

app = Flask(__name__)
app.secret_key = "your_secret_key"

# Database initialization function
DATABASE = "users.db"

def init_db():
    if not os.path.exists(DATABASE):
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                first_name TEXT NOT NULL,
                last_name TEXT NOT NULL,
                email TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

# Home route (Create Account Page)
@app.route("/")
def create_account():
    return render_template("create_account.html")

# Registration route
@app.route("/register", methods=["POST"])
def register():
    first_name = request.form.get("first_name")
    last_name = request.form.get("last_name")
    email = request.form.get("email")
    password = request.form.get("password")
    confirm_password = request.form.get("confirm_password")

    # Validate inputs
    if not (first_name and last_name and email and password and confirm_password):
        flash("All fields are required!", "error")
        return redirect(url_for("create_account"))

    if password != confirm_password:
        flash("Passwords do not match!", "error")
        return redirect(url_for("create_account"))

    # Hash the password
    hashed_password = generate_password_hash(password, method="sha256")

    # Save user data in the database
    try:
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO users (first_name, last_name, email, password)
            VALUES (?, ?, ?, ?)
        ''', (first_name, last_name, email, hashed_password))
        conn.commit()
        flash("Account created successfully! Please login.", "success")
    except sqlite3.IntegrityError:
        flash("Email already registered. Please use a different email.", "error")
    finally:
        conn.close()

    return redirect(url_for("create_account"))

# Run the app
if __name__ == "__main__":
    init_db()
    app.run(debug=True)
